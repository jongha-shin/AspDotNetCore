@{
    ViewData["Title"] = "사인하기";
}
<style>
    #signCheck {
        display: none;
    }
    label{
        margin-bottom: 0;
    }
    input[type=checkbox] + label {
        width: 4rem;
        height: 2rem;
        cursor: pointer;
        font-size: 13px;
        background-color: rgba(33, 64, 133, 0.1);
        border-radius: 0.35rem;
        border: solid 1px rgba(33, 64, 133, 0.7);
        text-align: center;
        vertical-align: bottom;
    }
        input[type=checkbox] + label:before {
            content: "";
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-top: 5px;
            background-color: #ccc;
            border-radius: 2px;
            box-shadow: inset 0px 1px 1px 0px rgba(0, 0, 0, .3), 0px 1px 0px 0px rgba(255, 255, 255, .8);
            line-height: 18px;
            text-align: center;
        }
        input[type=checkbox]:checked + label:before {
            content: "\2713"; /* 체크모양 */
            text-shadow: 1px 1px 1px rgba(0, 0, 0, .2);
            font-size: 18px;
            font-weight: 800;
            color: #fff;
            background: #2f87c1;
            text-align: center;
            line-height: 18px;
        }

    #resetBtn {
        z-index: 1;
        position: fixed;
        left: 13rem;
        top: 4.5rem;
        background-color: rgba(202, 102, 90,0.5);
    }
   
    #startSign {
        z-index: 1;
        position: fixed;
        left: 11rem;
        top: 7rem;
        background-color: rgba(55, 99, 171,0.5);
    }

    /* page-loading */
    #page-loading {
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        position: fixed;
        display: table;
        background-color: rgba(255,255,255,0.5);
        z-index: 9999;
        text-align: center;
    }

        #page-loading i {
            vertical-align: middle;
            text-align: center;
            display: table-cell;
            font-size: 60px;
        }

    #pageController {
        text-align: center;
        cursor: pointer;
        position: fixed;
        left: 11rem;
        bottom: 4.5rem;
        background-color: rgba(33, 64, 133, 0.1);
        border-radius: 0.35rem;
        border: solid 1px rgba(33, 64, 133, 0.7);
    }

    #wrapper {
        /*overflow-y: scroll;
        overflow-x: scroll;*/
        -webkit-overflow-scrolling: touch;
    }

    /* * {
        box-sizing: border-box
    }*/

    html, body {
        margin: 0px;
        padding: 0px;
    }
</style>

<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
@*<script type="text/javascript" src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>*@

@if (ViewBag.IsSignature == "N") {
<div class="offset-sm-3 mb-2">
    <span class="ml-3 mr-2" style="font-size:smaller; ">page: <span id="page_num"></span> / <span id="page_count"></span></span>
    <button class="btn btn-sm btn-danger mr-2" onclick="reStart()" type="button"><i class="fas fa-eraser"></i></button>
    
    <span id="signController" class="mb-3" style="display:none;">
        <a href="#" class="mr-2" onclick="pageLoading('-')"><img src="~/img/search-prev.png" style="width:13px; height:20px; margin:5px" /></a>

        <input id="signCheck" type="checkbox" />
        <label for="signCheck">
            <i class="fas fa-pen-fancy ml-2"></i>
        </label>

        <a href="#" class="nextPage ml-2 mr-2" onclick="pageLoading('+')"><img src="~/img/search-next.png" style="width:13px; height:20px; margin:5px" /></a>
        <button class="btn btn-sm btn-primary ml-2 mr-2 lastPage" id="lastPage" onclick="pageLoading('+')" type="button" style="display:none;"><i class="fas fa-save"></i></button>
    </span>
    <span class="pageController mb-3">
        <a href="#" id="prev" class="mr-2"><img src="~/img/search-prev.png" style="width:13px; height:20px; margin:5px" /></a>

        <button class="btn btn-sm btn-primary" type="button" id="doSign" onclick="startSign()">사인하기</button>

        <a href="#" id="next" class="nextPage ml-2 mr-2 "><img src="~/img/search-next.png" style="width:13px; height:20px; margin:5px" /></a>
        <button class="btn btn-sm btn-primary ml-2 mr-2 lastPage" id="lastPage" onclick="pageLoading('+')" type="button" style="display:none;"><i class="fas fa-save"></i></button>
    </span>

    <button class="btn btn-sm btn-outline-secondary mr-1" id="smallerBtn" type="button"><i class="fas fa-search-minus"></i></button>
    <button class="btn btn-sm btn-outline-secondary" id="biggerBtn" type="button"><i class="fas fa-search-plus"></i></button>
</div>
}else{
    <div class="offset-2 offset-sm-4">
        <a href="#" id="prev" class="mr-2"><img src="~/img/search-prev.png" style="width:13px; height:20px; margin:5px" /></a>
        <span class="mr-2">미리보기: <span id="page_num"></span> / <span id="page_count"></span></span>
        <a href="#" id="next" class="mr-2"><img src="~/img/search-next.png" style="width:13px; height:20px; margin:5px" /></a>
        <button class="btn btn-sm btn-outline-secondary" id="smallerBtn" type="button"><i class="fas fa-search-minus"></i></button>
        <button class="btn btn-sm btn-outline-secondary mr-1" id="biggerBtn" type="button"><i class="fas fa-search-plus"></i></button>
    </div>
}
<div id="signPage" style="white-space:nowrap; overflow:auto; height: 81vh;">
    <div id="SignCanvas" style="height:730px;">
        <canvas id="the-canvas"></canvas>
        <img id="tempIMG" src="" alt="Alternate Text" style="display:none" />
    </div>
</div>

@*<button id="btnClear">지우기</button>*@
@*<button id="saveBtn" onclick="UploadPic()">db서명저장png</button>*@

<div id="page-loading" style="display:none">
    <i class="fa fa-spinner fa-pulse fa-3x fa-fw margin-bottom"></i>
</div>

<script>

    //setTimeout(function () { if (window.pageYOffset == 0) { window.scrollTo(0, 1); } }, 50);

    //page 비율 => pageRatio()
    var ratio;
    var firstRatio = 4;
    pageRatio(firstRatio);

    // pdf 변수
    var img1 = null, img2 = null, img3 = null, img4 = null, img5 = null, img6 = null, img7 = null, img8 = null, img9 = null, img10 = null
    var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null,
        scale = 3,
        canvas = document.getElementById('the-canvas'),
        ctx = canvas.getContext('2d');

    // 싸인 변수
    var isDraw = false;
    var width = "2";
    var color = "#000";
    var pDraw = $('#the-canvas').offset();
    var currP = null;
    var drawBackup = new Array();
    var scrollX = document.getElementById("signPage").scrollLeft;
    var scrollY = document.getElementById("signPage").scrollTop;


    $(document).ready(function () {

        $("html,body,#wrapper").css({   // 상단 url 고정
            height: $(window).height()
        });
        var Seqid = "@ViewBag.Seqid";
        var Ftype = "@ViewBag.FileType";

        //$("#SignCanvas").css({ "transform": "scale(" + 0.1 * ratio+")" });  // 이용자 편의를 위해 축소

        if (Ftype == ".pdf") ViewPDF(Seqid);
        else ViewElseFile(Seqid);

        //$(".toWriteSignature").on("click", function () {
        //    if (!$("#signCheck").is(":checked")) {
        //        //console.log('not');
        //        $("#signCheck").prop("checked", true);

        //    } else {
        //        //console.log('yes');
        //        $("#signCheck").prop("checked", false);
        //    }
        //});
    });
    function ViewElseFile(Seqid) {
        //alert("not pdf");
        $.ajax({
            url: "/MyInfo/Sub8_3/" + Seqid,
            type: "GET",
            data: Text,
            success: function (rs) {
                showElseFile(rs);
            },
            error: function () {
                alert("err");
            }
        })
    }
    function ViewPDF(Seqid) {
        $.ajax({
            url: "/MyInfo/Sub8_2/" + Seqid,
            type: "GET",
            data: Text,
            success: function (rs) {
                //console.log("1 succ : " + rs.length);
                var data = atob(rs);
                //console.log("2 data : " + data.length);
                showPDF(data);
            },
            error: function () {
                alert("err");
            }
        })
    }


    // Event (마우스)
    $('#the-canvas').on('mousedown', function (e) {
        if (e.button === 0) {
            saveCanvas();
            e.preventDefault();
            ctx.beginPath();
            if ($("#signCheck").is(":checked"))isDraw = true;
        }
    });
    $('#the-canvas').on('mousemove', function (e) {
        var event = e.originalEvent;
        e.preventDefault();
        currP = { X: event.offsetX, Y: event.offsetY };
        if (isDraw) draw_line(currP);
    });
    $('#the-canvas').on('mouseup', function (e) {
        e.preventDefault();
        isDraw = false;
    });
    $('#the-canvas').on('mouseleave', function (e) {
        isDraw = false;
    });

    // Event (터치스크린)
    $('#the-canvas').on('touchstart', function (e) {
        //var event = e.originalEvent;
        //const X = event.touches[0].pageX - pDraw.left + document.getElementById("signPage").scrollLeft;
        //const Y = event.touches[0].pageY - pDraw.top + document.getElementById("signPage").scrollTop;
        //console.log("position: X: " + X*1.4 + " / Y: " + Y*1.4);
        saveCanvas();
        ctx.beginPath();

        if ($("#signCheck").is(":checked")) {
            e.preventDefault();
            e.stopPropagation();
            isDraw = true;
        }
    });
    $('#the-canvas').on('touchmove', function (e) {
        scrollX = document.getElementById("signPage").scrollLeft;
        scrollY = document.getElementById("signPage").scrollTop;

        var event = e.originalEvent;
        //console.log("터치중: " + ratio);
        currP = {
            X: (event.touches[0].pageX - pDraw.left + scrollX) * 10 / ratio,
            Y: (event.touches[0].pageY - pDraw.top + scrollY) * 10 / ratio
        };
        if (isDraw) {
            e.preventDefault();
            e.stopPropagation();
            draw_line(currP);
        }
    });
    $('#the-canvas').on('touchend', function (e) {
        if (isDraw) {
            e.preventDefault();
            e.stopPropagation();
            isDraw = false;
        }
    });
    
        // 선 그리기
    function draw_line(p) {
            ctx.lineWidth = width;
            ctx.lineCap = 'round';
            ctx.lineTo(p.X, p.Y);
            ctx.moveTo(p.X, p.Y);
            ctx.strokeStyle = color;
            ctx.stroke();
    }

    function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            localStorage.removeItem('imgCanvas');
        }
    function saveCanvas() {
            drawBackup.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        }

        //$('#btnClear').click(function () {
        //    clearCanvas();
        //});

        /**
         * If another page rendering in progress, waits until the rendering is
         * finised. Otherwise, executes rendering immediately.
         */
    function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }
        /**
         * Displays previous page.
         */
    function onPrevPage() {
        if (pageNum <= 1) {
                return;
        }
        if (eval("img" + (pageNum - 1)) != null) {
            //console.log("싸인있는 페이지");
            showPageWithSign(pageNum - 1);
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    }
    document.getElementById('prev').addEventListener('click', onPrevPage);
        /**
         * Displays next page.
         */
    function onNextPage() {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        if (eval("img" + (pageNum + 1)) != null) {
            //console.log("싸인있는 페이지");
            showPageWithSign(pageNum + 1);
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    }
    document.getElementById('next').addEventListener('click', onNextPage);
        /**
         * Asynchronously downloads PDF.
         */
    function showPDF(data) {
            // Loaded via <script> tag, create shortcut to access PDF.js exports.
            var pdfjsLib = window['pdfjs-dist/build/pdf'];
            // The workerSrc property shall be specified.
            pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

            pdfjsLib.getDocument({ data: data }).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('page_count').textContent = pdfDoc.numPages;
                //console.log("page: " + pdfDoc.numPages);

                // Initial/first page rendering
                renderPage(pageNum);
            });
        }
        /**
         * Get page info from document, resize canvas accordingly, and render page.
         * param num Page number.
         */
    function renderPage(num) {
        //console.log("현재페이지:" + num);
        if (eval("img" + pdfDoc.numPages) == null) $(".lastPage").prop("disabled", true);

        $("#page-loading").hide();
        $("#signCheck").prop("checked", false);
        if (num != pdfDoc.numPages) {
            $(".nextPage").show();
            $(".lastPage").hide();
            $("#signController").hide();
            $(".pageController").show();
        } else {
            $(".nextPage").hide();
            $(".lastPage").show();
            $("#signController").hide();
            $(".pageController").show();
        }
        pageRendering = true;
        // Using promise to fetch the page
        pdfDoc.getPage(num).then(function (page) {
            var viewport = page.getViewport({ scale: scale });
            // width="773" height="1093"
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            // Render PDF page into canvas context
            var renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };
            var renderTask = page.render(renderContext);

            // Wait for rendering to finish
            renderTask.promise.then(function () {
                pageRendering = false;
                if (pageNumPending !== null) {
                    // New page rendering is pending
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
            });
        });

        // Update page counters
        document.getElementById('page_num').textContent = num;
    }
    // 다음페이지 눌렀을 때 그 페이지 저장하며 넘어감. 마지막 페이지일 경우 최종 업로드메소드 실행.
    function pageLoading(flag) {
        // 마지막페이지일경우 저장 후 검사 실행
        if (pageNum == pdfDoc.numPages) {

            
            eval('img' + pdfDoc.numPages + "=\"" + document.getElementById('the-canvas').toDataURL('image/png', 1.0) + "\";");
            if (flag == '-') {
                pageNum = pageNum - 1
                if (pageNum <= 0) pageNum = 1;
                if (eval("img" + (pageNum)) != null) {
                    showPageWithSign(pageNum);
                    return;
                } else {
                    renderPage(pageNum);
                    return;
                }
               
            }

            $("#page-loading").show();

            var checkPage = checkImg()
            //console.log("페이지로딩 checkImg():" + checkPage);
            if (checkPage == -1) {
                UploadPdf();
            } else {
                pageNum = checkPage
                renderPage(pageNum);
                return;
            }

        } else {
            var nextPage = pageNum
            if (flag == '+') nextPage = pageNum + 1;
            if (flag == '-') {
                nextPage = pageNum - 1;
                if (nextPage <= 0) nextPage = 1;
            }
              
            var canvas_save = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
            if (pageNum == 1) img1 = canvas_save;
            if (pageNum == 2) img2 = canvas_save;
            if (pageNum == 3) img3 = canvas_save;
            if (pageNum == 4) img4 = canvas_save;
            if (pageNum == 5) img5 = canvas_save;
            if (pageNum == 6) img6 = canvas_save;
            if (pageNum == 7) img7 = canvas_save;
            if (pageNum == 8) img8 = canvas_save;
            if (pageNum == 9) img9 = canvas_save;
            if (pageNum == 10) img10 = canvas_save;
            pageNum = nextPage
            if (eval("img" + (nextPage)) != null) {
                showPageWithSign(pageNum);
                return;
            }
            queueRenderPage(pageNum);
            $("#signPage").scrollTop(0);
            $("#signPage").scrollLeft(0);
        }
    }
    function checkImg() {
        var maxPage = pdfDoc.numPages;
        var result = -1;
        for (var i = 1; i < maxPage; i++) {
            if (eval("img" + i) == null)
            {
                alert("저장되지 않은 페이지가 있습니다.");
                //console.log("저장안댐: "+i)
                result = i;
                break;
            }
        }
        return result;
    }

    function showElseFile(data) {
            //console.log(data.length);
            var imgClo = new Image();
            imgClo.src = data;
            //이미지 경로 설정
            //$("#tempIMG").attr("src", data);
            imgClo.onload = function () {
                var ctx2 = document.getElementById("the-canvas").getContext("2d");
                //$("#the-canvas").width("500");
                $("#the-canvas").attr("width", imgClo.width);
                $("#the-canvas").attr("height", imgClo.height);
                ctx2.drawImage(imgClo, 0, 0, imgClo.width, imgClo.height);
            }


    }
    function showPageWithSign(page) {
        $("#signCheck").prop("checked", false);
        //console.log("싸인있는 현재페이지:" + page);
        if (page != pdfDoc.numPages) {
            $(".nextPage").show();
            $(".lastPage").hide();
            $("#signController").hide();
            $(".pageController").show();
        } else {
            $(".nextPage").hide();
            $(".lastPage").show();
            $("#signController").hide();
            $(".pageController").show();
        }
        var imgClo = new Image();
        imgClo.src = eval("img"+page);
        //이미지 경로 설정
        //$("#tempIMG").attr("src", data);
        imgClo.onload = function () {
            var ctx2 = document.getElementById("the-canvas").getContext("2d");
            //$("#the-canvas").width("500");
            $("#the-canvas").attr("width", imgClo.width);
            $("#the-canvas").attr("height", imgClo.height);
            ctx2.drawImage(imgClo, 0, 0, imgClo.width, imgClo.height);
        }
        $("#page_num").text(page);
        pageNum = page;
    }

    function UploadPdf() {

            var imgWidth = 210; // 이미지 가로 길이(mm) / A4 기준 210mm
            var imgHeight = 297; //document.getElementById('the-canvas').height * imgWidth / document.getElementById('the-canvas').width;
            var pdf = new jsPDF({
                'orientation': 'p',
                'unit': 'mm',
                'format': 'a4',
                'compress': true
            });

            if (pdfDoc.numPages == 1) {
                //alert("1 page pdf");
                pdf.addImage(img1, 'PNG', 0, 0, imgWidth, imgHeight);

            } else {
                // 첫페이지
                pdf.addImage(img1, 'PNG', 0, 0, imgWidth, imgHeight);
                // img2 부터 최대 페이지까지 반복
                for (var i = 2; i <= pdfDoc.numPages; i++) {
                    pdf.addPage();
                    pdf.addImage(eval('img' + i), 'PNG', 0, 0, imgWidth, imgHeight);
                }
            }
            var Seqid = "@ViewBag.Seqid";
            var blobBin = pdf.output(); // base64로 인코드
            //console.log("blobBin 길이: " + blobBin.length);
            //console.log("blobBin: " + blobBin);
            var array = [];
            for (var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }
            var file = new Blob([new Uint8Array(array)], { type: 'application/pdf' });

            var formData = new FormData();	// formData 생성
            formData.append("file", file);	// file data 추가

            console.log("==****pdf.output() :" + pdf.output().length);
            $.ajax({
                url: "/File/SavePdfWithSign/" + Seqid,
                type: "POST",
                processData: false,	// data 파라미터 강제 string 변환 방지!!
                contentType: false,	// application/x-www-form-urlencoded; 방지!!
                data: formData,
                success: function (rs) {
                    $("#page-loading").hide();
                    alert("서명이 등록되었습니다!");
                    location.reload(true);
                },
                error: function (rs) {
                    alert("요청 실패");
                }
            });

            //pdf.save('screenshot.pdf');
        }

    $("#biggerBtn").on("click", function () {
        ratio += 1;
        if (ratio >= 11) return ratio = 10;
        pageRatio(ratio);
    });
    $("#smallerBtn").on("click", function () {
        ratio -= 1;
        if (ratio <= 0) return ratio = 1;
        pageRatio(ratio);
    });
    function pageRatio(tempRatio) {
        ratio = tempRatio;
        $("#SignCanvas").css({ "transform": "scale(" + 0.1 * ratio + ")"});
        //console.log(ratio);
        $("#signPage").scrollTop(0);
        $("#signPage").scrollLeft(0);
        scrollX = document.getElementById("signPage").scrollLeft;
        scrollY = document.getElementById("signPage").scrollTop;
        pDraw = $('#the-canvas').offset();
        $("#signCheck").prop("checked", false);
    }
    function reStart() {
        //location.reload();
        eval('img' + pageNum + "=" + null + ";");
      
        renderPage(pageNum);
        $("#signController").hide();
        $(".pageController").show();
    }
    function startSign() {
        $(".lastPage").prop("disabled", false);
        $("#signCheck").prop("checked", true);
        $("#signController").show();
        $(".pageController").hide();
    }

        @*function UploadPic() {
            var Seqid = "@ViewBag.Seqid";
            var imgDataUrl = document.getElementById("the-canvas").toDataURL("image/png"); // 캔버스 이미지 정보를 base64 문자열로 변환 png
            //console.log("3 imgDataUrl: "+imgDataUrl);
            var blobBin = atob(imgDataUrl.split(',')[1]);     // base64 header 와 body 분리, base64를 디코딩하여 이진데이터로 전환
            //console.log("4 blobBin: " + blobBin);

            var array = [];
            for (var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }

            var file = new Blob([new Uint8Array(array)], { type: 'image/png' });	// Blob 생성 png
            //var file = new Blob([new Uint8Array(array)], { type: 'application/pdf' });	// Blob 생성 pdf

            var formData = new FormData();	// formData 생성
            formData.append("file", file);	// file data 추가

            alert("===일시정지===" + formData.get("file").size);

            $.ajax({
                url: "/File/SavePngWithSign/" + Seqid,
                type: "POST",
                processData: false,	// data 파라미터 강제 string 변환 방지!!
                contentType: false,	// application/x-www-form-urlencoded; 방지!!
                data: formData,
                success: function (rs) {
                    alert("서명이 등록되었습니다!");
                    location.reload(true);
                },
                error: function (rs) {
                    alert("요청 실패");
                }
            });

        }*@

</script>