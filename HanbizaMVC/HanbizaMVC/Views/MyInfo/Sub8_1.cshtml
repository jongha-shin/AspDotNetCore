@{
    ViewData["Title"] = "사인하기";
}
<style>
    
        /*   .toWriteSignature {
            position: fixed;
            left: 9rem;
            top: 4.5rem;
            width: 4rem;
            height: 2rem;
            text-align: center;
            color: rgba(33, 64, 133, 0.7) !important;
            background-color: rgba(33, 64, 133, 0.1);
            line-height: 32px;
            border-radius: 0.35rem;
            border: solid 1px rgba(33, 64, 133, 0.7);

        }
            .toWriteSignature:hover {
                cursor: pointer;
                background-color: rgba(33, 64, 133, 0.7);
                color: #fff !important;
            }
    */
        #signCheck {
            display: none;
        }

        input[type=checkbox] + label {
            position: fixed;
            left: 8.5rem;
            top: 4.5rem;
            width: 4rem;
            height: 2rem;
            cursor: pointer;
            font-size: 13px;
            /*text-align: center;*/
            line-height: 32px;
            background-color: rgba(33, 64, 133, 0.1);
            border-radius: 0.35rem;
            border: solid 1px rgba(33, 64, 133, 0.7);
        }

            input[type=checkbox] + label:before {
                content: "";
                display: inline-block;
                width: 20px;
                height: 20px;
                margin-right: 10px;
                margin-top: 5px;
                position: absolute;
                left: 2rem;
                /*bottom: 10px;*/
                background-color: #ccc;
                border-radius: 2px;
                box-shadow: inset 0px 1px 1px 0px rgba(0, 0, 0, .3), 0px 1px 0px 0px rgba(255, 255, 255, .8);
            }

        input[type=checkbox]:checked + label:before {
            content: "\2713"; /* 체크모양 */
            text-shadow: 1px 1px 1px rgba(0, 0, 0, .2);
            font-size: 18px;
            font-weight: 800;
            color: #fff;
            background: #2f87c1;
            text-align: center;
            line-height: 18px;
        }

    #saveBtn {
        position: fixed;
        left: 18rem;
        top: 4.5rem;
        background-color: rgba(55, 99, 171,0.5);
    }
    #resetBtn {
        position: fixed;
        left: 13rem;
        top: 4.5rem;
        background-color: rgba(202, 102, 90,0.5);
    }
    /* page-loading */
    #page-loading {
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        position: fixed;
        display: table;
        background-color: rgba(255,255,255,0.5);
        z-index: 9999;
        text-align: center;
    }

        #page-loading i {
            vertical-align: middle;
            text-align: center;
            display: table-cell;
            font-size: 60px;
        }

    #pageController {
        text-align: center;
        cursor: pointer;
        position: fixed;
        left: 11rem;
        bottom: 4.5rem;
        background-color: rgba(33, 64, 133, 0.1);
        border-radius: 0.35rem;
        border: solid 1px rgba(33, 64, 133, 0.7);
    }
</style>
<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
@*<script type="text/javascript" src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>*@
<div id="signPage" style="white-space:nowrap; overflow:auto;">
    @if (ViewBag.IsSignature == "N") {
        <button class="btn btn-sm btn-danger" id="resetBtn" onclick="location.reload()">다시하기</button>
        <input id="signCheck" type="checkbox" />
        <label for="signCheck">
            <i class="fas fa-pen-fancy ml-2"></i>
        </label>
        <button class="btn btn-sm btn-primary" id="saveBtn" type="button" onclick="pageLoading()">확인</button>
    }

    <canvas id="the-canvas" width="1000" height="1000"></canvas>

    <div id="pageController">
        <div>
            <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
        </div>
        <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-secondary" id="prev" type="button" style="background-color: rgba(133, 135, 150,0.5); color:#fff">이전페이지</button>
            <button class="btn btn-primary" id="next" type="button" style="background-color: rgba(55, 99, 171,0.5);">다음페이지</button>
        </div>
    </div>

</div>

@*<button id="btnClear">지우기</button>*@
@*<button id="saveBtn" onclick="UploadPic()">db서명저장png</button>*@

<div id="page-loading" style="display:none">
    <i class="fa fa-spinner fa-pulse fa-3x fa-fw margin-bottom"></i>
</div>

    <script>
        // pdf 변수
        var img1 = null, img2 = null, img3 = null, img4 = null, img5 = null, img6 = null, img7 = null, img8 = null, img9 = null, img10 = null
        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 1.3,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');


        // 싸인 변수
        var isDraw = false;
        var width = "2";
        var color = "#000";
        var pDraw = $('#the-canvas').offset();
        var currP = null;
        var drawBackup = new Array();

        $(function () {
            var Seqid = "@ViewBag.Seqid";
            ViewPDF(Seqid);

            $(".toWriteSignature").on("click", function () {
                if (!$("#signCheck").is(":checked")) {
                    console.log('not');
                    $("#signCheck").prop("checked", true);

                } else {
                    console.log('yes');
                    $("#signCheck").prop("checked", false);
                }
            });
        });

        function ViewPDF(Seqid) {
            $.ajax({
                url: "/MyInfo/Sub8_2/" + Seqid,
                type: "GET",
                data: Text,
                success: function (rs) {
                    console.log("1 succ : " + rs.length);
                    var data = atob(rs);
                    console.log("2 data : " + data.length);
                    showPDF(data);
                },
                error: function () {
                    alert("err");
                }
            })
            
        }


        // Event (마우스)
        $('#the-canvas').on('mousedown', function (e) {
            if (e.button === 0) {
                saveCanvas();
                e.preventDefault();
                ctx.beginPath();
                if ($("#signCheck").is(":checked"))isDraw = true;
            }
        });
        $('#the-canvas').on('mousemove', function (e) {
            var event = e.originalEvent;
            e.preventDefault();
            currP = { X: event.offsetX, Y: event.offsetY };
            if (isDraw) draw_line(currP);
            /*
            isDraw = true;
            */
        });
        $('#the-canvas').on('mouseup', function (e) {
            e.preventDefault();
            isDraw = false;
        });
        $('#the-canvas').on('mouseleave', function (e) {
            isDraw = false;
        });

        // Event (터치스크린)
        $('#the-canvas').on('touchstart', function (e) {
            //var event = e.originalEvent;
            //const X = event.touches[0].pageX - pDraw.left + document.getElementById("signPage").scrollLeft;
            //const Y = event.touches[0].pageY - pDraw.top;
            if ($("#signCheck").is(":checked")) {
                //alert("position: X: " + X + " / Y: " + Y);

                saveCanvas();
                e.preventDefault();
                isDraw = true;
                ctx.beginPath();
            }
        });
        $('#the-canvas').on('touchmove', function (e) {
            var event = e.originalEvent;
            currP = { X: event.touches[0].pageX - pDraw.left + document.getElementById("signPage").scrollLeft, Y: event.touches[0].pageY - pDraw.top };
            if (isDraw) {
                e.preventDefault();
                draw_line(currP);
            }
        });
        $('#the-canvas').on('touchend', function (e) {
            if (isDraw) {
                e.preventDefault();
                isDraw = false;
            }
        });


        // 선 그리기
        function draw_line(p) {
            ctx.lineWidth = width;
            ctx.lineCap = 'round';
            ctx.lineTo(p.X, p.Y);
            ctx.moveTo(p.X, p.Y);
            ctx.strokeStyle = color;
            ctx.stroke();
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            localStorage.removeItem('imgCanvas');
        }
        function saveCanvas() {
            drawBackup.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
        }

        $('#btnClear').click(function () {
            clearCanvas();
        });

        /**
         * If another page rendering in progress, waits until the rendering is
         * finised. Otherwise, executes rendering immediately.
         */
        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }
        /**
         * Displays previous page.
         */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);
        /**
         * Displays next page.
         */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }

            //if (confirm("서명정보를 저장하시겠습니까?")) {
            
                pageNum++;
                queueRenderPage(pageNum);
            //}
        }
        document.getElementById('next').addEventListener('click', onNextPage);
        /**
         * Asynchronously downloads PDF.
         */
        function showPDF(data) {
            // Loaded via <script> tag, create shortcut to access PDF.js exports.
            var pdfjsLib = window['pdfjs-dist/build/pdf'];
            // The workerSrc property shall be specified.
            pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

            pdfjsLib.getDocument({ data: data }).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;
                document.getElementById('page_count').textContent = pdfDoc.numPages;
                //console.log("page: " + pdfDoc.numPages);

                // Initial/first page rendering
                renderPage(pageNum);
            });
        }
        /**
         * Get page info from document, resize canvas accordingly, and render page.
         * param num Page number.
         */
        function renderPage(num) {
            if (num != pdfDoc.numPages) {
                $("#saveBtn").html("확인");
            } else {
                $("#saveBtn").html("서명저장");
            }
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function (page) {
                var viewport = page.getViewport({ scale: scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                //console.log("canvas.height: " + canvas.height + " / canvas.width: " + canvas.width);

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = num;
        }

        function pageLoading() {
            if (pageNum == pdfDoc.numPages) {
                
                $("#page-loading").show();
                UploadPdf();
            } else {
                if (pageNum == 1) img1 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 2) img2 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 3) img3 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 4) img4 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 5) img5 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 6) img6 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 7) img7 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 8) img8 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 9) img9 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                if (pageNum == 10) img10 = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                pageNum++;
                queueRenderPage(pageNum);
            }
        }
        function UploadPdf() {
            
            var imgWidth = 210; // 이미지 가로 길이(mm) / A4 기준 210mm
            var imgHeight = 297; //document.getElementById('the-canvas').height * imgWidth / document.getElementById('the-canvas').width;
            var pdf = new jsPDF({
                'orientation': 'p',
                'unit': 'mm',
                'format': 'a4',
                'compress': true
            });

            if (pdfDoc.numPages == 1) {
                //alert("1 page pdf");
                var imgData = document.getElementById('the-canvas').toDataURL('image/png', 1.0);
                //console.log("3. pdf변환중 imgData: " + imgData.length)
                //console.log("imgWidth: " + imgWidth + "/ imgHeight: " + imgHeight);
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);

            } else {
                //alert(pdfDoc.numPages + "page pdf");
                pdf.addImage(img1, 'PNG', 0, 0, imgWidth, imgHeight);
                console.log("img1: " + img1.length);
                // img2 부터 최대 페이지까지 반복
                for (var i = 2; i < pdfDoc.numPages; i++) {
                    pdf.addPage();
                    pdf.addImage(eval('img' + i), 'PNG', 0, 0, imgWidth, imgHeight);
                    //console.log("img"+i+": "+eval('img' + i).length);
                }
                //
                eval('img' + pdfDoc.numPages + "=\"" + document.getElementById('the-canvas').toDataURL('image/png', 1.0) +"\";");
                pdf.addPage();
                pdf.addImage(eval('img' + pdfDoc.numPages), 'PNG', 0, 0, imgWidth, imgHeight);
                //console.log("img" + pdfDoc.numPages + ": " + eval('img' + pdfDoc.numPages).length);
            }
            var Seqid = "@ViewBag.Seqid";
            var blobBin = pdf.output(); // base64로 인코드
            //console.log("blobBin 길이: " + blobBin.length);
            //console.log("blobBin: " + blobBin);
            var array = [];
            for (var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }
            var file = new Blob([new Uint8Array(array)], { type: 'application/pdf' });

            var formData = new FormData();	// formData 생성
            formData.append("file", file);	// file data 추가

            console.log("==****pdf.output() :" + pdf.output().length);
            $.ajax({
                url: "/File/SavePdfWithSign/" + Seqid,
                type: "POST",
                processData: false,	// data 파라미터 강제 string 변환 방지!!
                contentType: false,	// application/x-www-form-urlencoded; 방지!!
                data: formData,
                success: function (rs) {
                    $("#page-loading").hide();
                    location.reload(true);
                    alert("서명이 등록되었습니다!");
                },
                error: function (rs) {
                    alert("요청 실패");
                }
            });

            //pdf.save('screenshot.pdf');
        }

        @*function UploadPic() {
            var Seqid = "@ViewBag.Seqid";
            var imgDataUrl = document.getElementById("the-canvas").toDataURL("image/png"); // 캔버스 이미지 정보를 base64 문자열로 변환 png
            //console.log("3 imgDataUrl: "+imgDataUrl);
            var blobBin = atob(imgDataUrl.split(',')[1]);     // base64 header 와 body 분리, base64를 디코딩하여 이진데이터로 전환
            //console.log("4 blobBin: " + blobBin);

            var array = [];
            for (var i = 0; i < blobBin.length; i++) {
                array.push(blobBin.charCodeAt(i));
            }

            var file = new Blob([new Uint8Array(array)], { type: 'image/png' });	// Blob 생성 png
            //var file = new Blob([new Uint8Array(array)], { type: 'application/pdf' });	// Blob 생성 pdf

            var formData = new FormData();	// formData 생성
            formData.append("file", file);	// file data 추가

            alert("===일시정지===" + formData.get("file").size);

            $.ajax({
                url: "/File/SavePngWithSign/" + Seqid,
                type: "POST",
                processData: false,	// data 파라미터 강제 string 변환 방지!!
                contentType: false,	// application/x-www-form-urlencoded; 방지!!
                data: formData,
                success: function (rs) {
                    alert("서명이 등록되었습니다!");
                    location.reload(true);
                },
                error: function (rs) {
                    alert("요청 실패");
                }
            });

        }*@

</script>