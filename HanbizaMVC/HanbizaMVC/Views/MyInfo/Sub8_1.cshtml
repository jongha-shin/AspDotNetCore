@{
    ViewData["Title"] = "사인하기";
}
<style>
    #the-canvas {
        /*border: 1px solid black;
        direction: ltr;*/
    }
</style>
<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
<script type="text/javascript" src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>

<div>
    <div id="boxes">
        <canvas id="the-canvas" width = "1920" height = "1080"></canvas>
    </div>
    <button id="prev">Previous</button>
    <button id="next">Next</button>
    &nbsp; &nbsp;
    <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
</div>
<button id="saveBtn" onclick="saveWithSign()">서명저장</button>
<script>
    var Seqid = "@ViewBag.Seqid";
    ViewPDF(Seqid);
    function ViewPDF(Seqid) {
        $.ajax({
            url: "/MyInfo/Sub8_2/" + Seqid,
            type: "GET",
            data: Text,
            success: function (rs) {
                alert("succ : " + rs);
                var data = atob(rs);
                showPDF(data);
            },
            error: function () {
                alert("err");
            }
        })
    }

    // Loaded via <script> tag, create shortcut to access PDF.js exports.
    var pdfjsLib = window['pdfjs-dist/build/pdf'];
    // The workerSrc property shall be specified.
    pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';
    var pdfDoc = null,
        pageNum = 1,
        pageRendering = false,
        pageNumPending = null,
        scale = 1.5,
        canvas = document.getElementById('the-canvas'),
        ctx = canvas.getContext('2d');

    var isDraw = false;
    var width = "3";
    var color = "#000";
    var pDraw = $('#the-canvas').offset();
    var currP = null;
    var drawBackup = new Array();

    // Event (마우스)
    $('#the-canvas').on('mousedown', function (e) {
        if (e.button === 0) {
            saveCanvas();
            e.preventDefault();
            ctx.beginPath();
            isDraw = true;
        }
    });
    $('#the-canvas').on('mousemove', function (e) {
        var event = e.originalEvent;
        e.preventDefault();
        currP = { X: event.offsetX, Y: event.offsetY };
        if (isDraw) draw_line(currP);
        /*
        isDraw = true;
        */
    });
    $('#the-canvas').on('mouseup', function (e) {
        e.preventDefault();
        isDraw = false;
    });
    $('#the-canvas').on('mouseleave', function (e) {
        isDraw = false;
    });


    // Event (터치스크린)
    $('#the-canvas').on('touchstart', function (e) {
        saveCanvas();
        e.preventDefault();
        ctx.beginPath();
    });
    $('#the-canvas').on('touchmove', function (e) {
        var event = e.originalEvent;
        e.preventDefault();
        currP = { X: event.touches[0].pageX - pDraw.left, Y: event.touches[0].pageY - pDraw.top };
        draw_line(currP);
    });
    $('#the-canvas').on('touchend', function (e) {
        e.preventDefault();
    });

    // 선 그리기
    function draw_line(p) {
        ctx.lineWidth = width;
        ctx.lineCap = 'round';
        ctx.lineTo(p.X, p.Y);
        ctx.moveTo(p.X, p.Y);
        ctx.strokeStyle = color;
        ctx.stroke();
    }
    function clearCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.beginPath();
        localStorage.removeItem('imgCanvas');
    }
    function saveCanvas() {
        drawBackup.push(ctx.getImageData(0, 0, canvas.width, canvas.height));
    }

    $('#btnClear').click(function () {
        clearCanvas();
    });

    /**
     * Get page info from document, resize canvas accordingly, and render page.
     * param num Page number.
     */
    function renderPage(num) {
        pageRendering = true;
        // Using promise to fetch the page
        pdfDoc.getPage(num).then(function (page) {
            var viewport = page.getViewport({ scale: scale });
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            // Render PDF page into canvas context
            var renderContext = {
                canvasContext: ctx,
                viewport: viewport
            };
            var renderTask = page.render(renderContext);

            // Wait for rendering to finish
            renderTask.promise.then(function () {
                pageRendering = false;
                if (pageNumPending !== null) {
                    // New page rendering is pending
                    renderPage(pageNumPending);
                    pageNumPending = null;
                }
            });
        });

        // Update page counters
        document.getElementById('page_num').textContent = num;
    }

    /**
     * If another page rendering in progress, waits until the rendering is
     * finised. Otherwise, executes rendering immediately.
     */
    function queueRenderPage(num) {
        if (pageRendering) {
            pageNumPending = num;
        } else {
            renderPage(num);
        }
    }

    /**
     * Displays previous page.
     */
    function onPrevPage() {
        if (pageNum <= 1) {
            return;
        }
        pageNum--;
        queueRenderPage(pageNum);
    }
    document.getElementById('prev').addEventListener('click', onPrevPage);

    /**
     * Displays next page.
     */
    function onNextPage() {
        if (pageNum >= pdfDoc.numPages) {
            return;
        }
        pageNum++;
        queueRenderPage(pageNum);
    }
    document.getElementById('next').addEventListener('click', onNextPage);

    /**
     * Asynchronously downloads PDF.
     */
    function showPDF(data) {
        pdfjsLib.getDocument({ data: data }).promise.then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(pageNum);
        });
    }

    function saveWithSign() {
        html2canvas($('#the-canvas')[0]).then(function (canvas) { //저장 영역 div id

            // 캔버스를 이미지로 변환
            var imgData = canvas.toDataURL('image/png');
            var imgWidth = 210; // 이미지 가로 길이(mm) / A4 기준 210mm
            var pageHeight = 297;  // 출력 페이지 세로 길이 계산 A4 기준
            var imgHeight = canvas.height * imgWidth / canvas.width;
            var heightLeft = imgHeight;
            var margin = 0; // 출력 페이지 여백설정
            var position = -1;
            var pdf = new jsPDF('p', 'mm');
            pdf.addImage(imgData, 'PNG', margin, position, imgWidth, imgHeight);

            //pdf.addImage(imgData, 'PNG', -30, -60);


            // 첫 페이지 출력
            heightLeft -= pageHeight;

            //한 페이지 이상일 경우 루프 돌면서 출력
            while (heightLeft >= 20) {
                position = heightLeft - imgHeight;
                pdf.addPage();
                pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
            }
            pdf.save('screenshot.pdf');
        });
    }
</script>